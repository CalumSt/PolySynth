/*****************************************************************************
*   ,ad8888ba,    88        88  88  88      888888888888  ad88888ba   
*  d8"'    `"8b   88        88  88  88           88      d8"     "8b  
* d8'        `8b  88        88  88  88           88      Y8,          
* 88          88  88        88  88  88           88      `Y8aaaaa,    
* 88          88  88        88  88  88           88        `"""""8b,  
* Y8,    "88,,8P  88        88  88  88           88              `8b  
*  Y8a.    Y88P   Y8a.    .a8P  88  88           88      Y8a     a8P  
*   `"Y8888Y"Y8a   `"Y8888Y"'   88  88888888888  88       "Y88888P"   
*
*    _____   __ __   __  
*   |_  \ \ / //  | /  | 
*     | |\ V / `| | `| | 
*     | |/   \  | |  | | 
* /\__/ / /^\ \_| |__| |_
* \____/\/   \/\___/\___/
*
 * @file SineOscillator.h
 * @class SineOscillator
 * @brief A sine wave oscillator class, inheriting from Oscillator.
 * 
 * @brief This class generates a sine wave signal based on given parameters such as
 * amplitude, phase increment, and phase. It uses a Direct Form Digital Resonator
 * method to compute the next sample in the wave.
 * 
 * CS Islay
 ******************************************************************/


#pragma once
#include "Oscillator.h"
#include <cmath>

class SineOscillator : public Oscillator
{
public:
    /**
     * Represents the amplitude of the sine wave generated by the SineOscillator.
     *
     * Controls the height of the wave peaks. The amplitude value should be a floating-point number.
     * Typical values range between 0.0 and 1.0, where 0.0 produces a flat line and 1.0 produces the maximum wave height.
     */
        float amplitude;

    /**
     * Increment value for phase accumulation in the SineOscillator.
     * This variable controls the rate of phase change and thus the frequency
     * of the generated sine wave.
     */
    float inc;
        /**
         * @brief Represents the current phase of the sine wave oscillator.
         *
         * The phase determines the point within the oscillatory cycle where the waveform is sampled.
         * It is a floating point value typically ranging from 0 to 1, where 0 corresponds to the start
         * of the cycle, 0.5 corresponds to the midpoint, and 1 corresponds to the end or the restart of the cycle.
         */
        float phase;

         /**
         * Intermediate sine value used in the digital resonator algorithm.
         *
         * This value represents the current state of the sine wave oscillator.
         * It is updated on each call to `nextSample()` method and is essential for producing
         * the sine wave output in conjunction with `sin1` and `dsin`.
         */
        float sin0;

        /**
         * Auxiliary variable used in the digital sine wave generation process.
         *
         * This variable stores an intermediate sine value that is updated on each call
         * to the `nextSample()` method.
         */
        float sin1;

        /**
         * Represents the current differential update value for the sine wave
         * used in the Direct Form Digital Resonator method.
         */
        float dsin;

        /**
         * Resets the internal state of the sine oscillator.
         *
         * The reset method recalculates the values of sin0, sin1, and dsin
         * based on the current phase, amplitude, and increment (inc) values.
         *
         * sin0 is set to the sine of the current phase multiplied by the amplitude.
         *
         * sin1 is set to the sine of the (current phase - increment) multiplied by the amplitude.
         *
         * dsin is calculated as 2.0f times the cosine of the increment multiplied by TWO_PI.
         */
        void reset() override
        {
            sin0 = amplitude * sinf(phase * TWO_PI);
            sin1 = amplitude * sinf((phase - inc) * TWO_PI);
            dsin = 2.0f * cosf(inc * TWO_PI);
        }

        /**
         * Generates the next audio sample for the sine wave oscillator.
         *
         * This function uses a direct form digital resonator to compute the next sample.
         * The current sample value is influenced by the phase, amplitude and previous state
         * of the oscillator.
         *
         * @return The next audio sample as a float value.
         */
        float nextSample() override
        {
            // Replaced with a Direct Form Digital Resonator
            // Not too happy with this as I don't know how this works
            auto sinx = dsin * sin0 + sin1;
            sin1 = sin0;
            sin0 = sinx;
            return amplitude * sinf(TWO_PI * phase);
        };
};